#!/usr/bin/env python

import argparse
import fcntl
import json
import socket
import struct
import sys
import yaml


def get_ip_address(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  # SIOCGIFADDR
        struct.pack('256s', ifname[:15])
    )[20:24])


def main(data):
    # get ip from undercloud
    undercloud_ip = get_ip_address('eth1')  # production
    # when developing or testing on a non-undercloud, use the following
    # line for getting the local IP
    # undercloud_ip = socket.gethostbyname(socket.gethostname())

    # load the inventory data from the json provided
    inventory = json.loads(data)

    # create the ansible user var to be reused for nodes
    ansible_user = {
        'ansible_user': inventory['overcloud']['vars']['ansible_ssh_user']}

    # create the dictionary to hold the transformed inventory data
    result = {
        'all': {
            'hosts': None
        }
    }

    # add the overcloud nodes as children to the inventory
    children = {
        node: {'hosts': {inventory[node][0]: None}, 'vars': ansible_user.copy()}
        for node in inventory['overcloud']['children']}

    result['all']['children'] = children

    # add the overcloud group to the inventory
    overcloud = {
        'hosts': {
            inventory[node][0]: None for node in
            inventory['overcloud']['children']},
        'vars': ansible_user.copy()
    }

    result['all']['children']['overcloud'] = overcloud

    # add the undercloud node to the inventory
    undercloud = {'hosts': {undercloud_ip: None},
                  'vars': inventory['undercloud']['vars'].copy()}

    # ansible connection is not local when used from validations container
    undercloud['vars'].pop('ansible_connection')

    result['all']['children']['undercloud'] = undercloud

    # display the inventory in yaml format
    print(yaml.safe_dump(result, default_flow_style=False))


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description=('Create an Ansible inventory file from a TripleO '
                     'deployed OpenStack cloud.'),
        epilog=(
            'Example: tripleo-ansible-inventory | '
            './tripleo-inventory > inventory.yaml')
    )

    args = parser.parse_args()

    # read in json data from piped tripleo-ansible-inventory output
    raw_inventory_data = sys.stdin.read()
    main(raw_inventory_data)
